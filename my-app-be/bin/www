#!/usr/bin/env node

import app from '../app.js'; 
import http from 'http';
import debugLib from 'debug';

const debug = debugLib('my-app-be:server');
process.env.DEBUG = 'my-app-be:*';

// Normalize port
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

console.log(`Server is starting on port: ${port}`);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize port function
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val; // Named pipe
  }
  if (port >= 0) {
    return port; // Valid port number
  }
  return false;
}

// Error handling for server
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Listening event for server
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log(`Server is listening on port: ${addr.port}`);
  debug('Listening on ' + bind);
}